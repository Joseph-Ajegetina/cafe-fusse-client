/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

import { Route as rootRouteImport } from './routes/__root'
import { Route as IndexRouteImport } from './routes/index'

const SuccessLazyRouteImport = createFileRoute('/success')()
const ReservationsLazyRouteImport = createFileRoute('/reservations')()
const MenuLazyRouteImport = createFileRoute('/menu')()
const GalleryLazyRouteImport = createFileRoute('/gallery')()
const CheckoutLazyRouteImport = createFileRoute('/checkout')()
const AboutLazyRouteImport = createFileRoute('/about')()

const SuccessLazyRoute = SuccessLazyRouteImport.update({
  id: '/success',
  path: '/success',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./routes/success.lazy').then((d) => d.Route))
const ReservationsLazyRoute = ReservationsLazyRouteImport.update({
  id: '/reservations',
  path: '/reservations',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./routes/reservations.lazy').then((d) => d.Route))
const MenuLazyRoute = MenuLazyRouteImport.update({
  id: '/menu',
  path: '/menu',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./routes/menu.lazy').then((d) => d.Route))
const GalleryLazyRoute = GalleryLazyRouteImport.update({
  id: '/gallery',
  path: '/gallery',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./routes/gallery.lazy').then((d) => d.Route))
const CheckoutLazyRoute = CheckoutLazyRouteImport.update({
  id: '/checkout',
  path: '/checkout',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./routes/checkout.lazy').then((d) => d.Route))
const AboutLazyRoute = AboutLazyRouteImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./routes/about.lazy').then((d) => d.Route))
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/about': typeof AboutLazyRoute
  '/checkout': typeof CheckoutLazyRoute
  '/gallery': typeof GalleryLazyRoute
  '/menu': typeof MenuLazyRoute
  '/reservations': typeof ReservationsLazyRoute
  '/success': typeof SuccessLazyRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/about': typeof AboutLazyRoute
  '/checkout': typeof CheckoutLazyRoute
  '/gallery': typeof GalleryLazyRoute
  '/menu': typeof MenuLazyRoute
  '/reservations': typeof ReservationsLazyRoute
  '/success': typeof SuccessLazyRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/about': typeof AboutLazyRoute
  '/checkout': typeof CheckoutLazyRoute
  '/gallery': typeof GalleryLazyRoute
  '/menu': typeof MenuLazyRoute
  '/reservations': typeof ReservationsLazyRoute
  '/success': typeof SuccessLazyRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/about'
    | '/checkout'
    | '/gallery'
    | '/menu'
    | '/reservations'
    | '/success'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/about'
    | '/checkout'
    | '/gallery'
    | '/menu'
    | '/reservations'
    | '/success'
  id:
    | '__root__'
    | '/'
    | '/about'
    | '/checkout'
    | '/gallery'
    | '/menu'
    | '/reservations'
    | '/success'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AboutLazyRoute: typeof AboutLazyRoute
  CheckoutLazyRoute: typeof CheckoutLazyRoute
  GalleryLazyRoute: typeof GalleryLazyRoute
  MenuLazyRoute: typeof MenuLazyRoute
  ReservationsLazyRoute: typeof ReservationsLazyRoute
  SuccessLazyRoute: typeof SuccessLazyRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/success': {
      id: '/success'
      path: '/success'
      fullPath: '/success'
      preLoaderRoute: typeof SuccessLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/reservations': {
      id: '/reservations'
      path: '/reservations'
      fullPath: '/reservations'
      preLoaderRoute: typeof ReservationsLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/menu': {
      id: '/menu'
      path: '/menu'
      fullPath: '/menu'
      preLoaderRoute: typeof MenuLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/gallery': {
      id: '/gallery'
      path: '/gallery'
      fullPath: '/gallery'
      preLoaderRoute: typeof GalleryLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/checkout': {
      id: '/checkout'
      path: '/checkout'
      fullPath: '/checkout'
      preLoaderRoute: typeof CheckoutLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AboutLazyRoute: AboutLazyRoute,
  CheckoutLazyRoute: CheckoutLazyRoute,
  GalleryLazyRoute: GalleryLazyRoute,
  MenuLazyRoute: MenuLazyRoute,
  ReservationsLazyRoute: ReservationsLazyRoute,
  SuccessLazyRoute: SuccessLazyRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
